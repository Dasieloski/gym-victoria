generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                   Int            @id @default(autoincrement())
  nombre               String
  username             String         @unique
  password             String
  carnetIdentidad      String         @unique
  telefono             String
  rol                  Rol
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  membresiaActualId    Int?           @unique
  entrenadorAsignadoId Int?
  visitasEsteMes       Int?           @default(0)
  foto                 String?
  entrenador           Entrenador?
  historiales          Historial[]
  membresias           Membresia[]
  registrosPeso        RegistroPeso[]
  reservasCliente      Reserva[]      @relation("ClienteReservas")
  entrenadorAsignado   Usuario?       @relation("EntrenadorClientes", fields: [entrenadorAsignadoId], references: [id])
  clientesAsignados    Usuario[]      @relation("EntrenadorClientes")
  membresiaActual      Membresia?     @relation("MembresiaActual", fields: [membresiaActualId], references: [id])
}

model Entrenador {
  id          Int         @id @default(autoincrement())
  usuarioId   Int         @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  usuario     Usuario     @relation(fields: [usuarioId], references: [id])
  historiales Historial[]
  reservas    Reserva[]   @relation("EntrenadorReservas")

  @@map("Entrenador")
}

model Membresia {
  id            Int           @id @default(autoincrement())
  tipo          TipoMembresia
  fechaInicio   DateTime
  fechaFin      DateTime
  estadoPago    EstadoPago
  clienteId     Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  historiales   Historial[]
  cliente       Usuario       @relation(fields: [clienteId], references: [id])
  usuarioActual Usuario?      @relation("MembresiaActual")
}

model Reserva {
  id           Int           @id @default(autoincrement())
  clienteId    Int
  entrenadorId Int?
  estado       EstadoReserva
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  fecha        DateTime
  historiales  Historial[]
  cliente      Usuario       @relation("ClienteReservas", fields: [clienteId], references: [id], map: "Reserva_ClienteId_fkey")
  entrenador   Entrenador?   @relation("EntrenadorReservas", fields: [entrenadorId], references: [id], map: "Reserva_EntrenadorId_fkey")
}

model Historial {
  id           Int         @id @default(autoincrement())
  accion       String
  descripcion  String
  usuarioId    Int
  entrenadorId Int?
  membresiaId  Int?
  reservaId    Int?
  fecha        DateTime    @default(now())
  entrenador   Entrenador? @relation(fields: [entrenadorId], references: [id], map: "Historial_EntrenadorId_fkey")
  membresia    Membresia?  @relation(fields: [membresiaId], references: [id], map: "Historial_MembresiaId_fkey")
  reserva      Reserva?    @relation(fields: [reservaId], references: [id], map: "Historial_ReservaId_fkey")
  usuario      Usuario     @relation(fields: [usuarioId], references: [id], map: "Historial_UsuarioId_fkey")
}

model RegistroPeso {
  id            BigInt    @id @default(autoincrement())
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  fecha         DateTime? @default(now()) @db.Timestamp(6)
  peso          Float?
  altura        Float?
  imc           Float?
  grasaCorporal Float?
  cuello        Float?
  pecho         Float?
  brazo         Float?
  cintura       Float?
  cadera        Float?
  muslo         Float?
  gluteo        Float?
  usuarioId     Int
  updateAt      DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  usuario       Usuario?  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("RegistroPeso")
}

enum Rol {
  ADMIN
  ENTRENADOR
  CLIENTE
  CLIENTEESPERA
}

enum TipoMembresia {
  MENSUAL
  TRIMESTRAL
  ANUAL
}

enum EstadoPago {
  PAGADO
  IMPAGADO
}

